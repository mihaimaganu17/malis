# More human readable CFG

expression  -> literal | unary | binary | grouping;
literal     -> NUMBER | STRING | "true" | "false" | "nil";
grouping    -> "(" expression ")";
unary       -> ( "-" | "!" ) expression;
binary      -> expression operator expression;
operator    -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/";

# Logical CFG

# A program is a sequence of declarations which ends with an EOF terminal
program     -> declaration* EOF;
# A declaration can be either a variable declaration of a statement
declaration -> classDecl
            | funDecl
            | varDecl
            | statement;
# Declaring a class is done with the `class` keyword
classDecl   -> "class" IDENTIFIER "{" function* "}";
# Declaring a function is done with the `fun` keyword
funDecl     -> "fun" function;
# A function is made up by an identifier, followed by an optional list of parameters surrounded by
# parenthesis and a block
function    -> IDENTIFIER "(" parameters? ")" block;
# Parameters are a list of one or more identifiers
parameters  -> IDENTIFIER ("," IDENTIFIER )*;
# Declaring a variable is done using the `var` keyword with an IDENTIFIER terminal. If we are
# binding the variable to an expression at the same time with the declaration, we use the equal
# sign between the identifier and the expression `=`.
varDecl     -> "var" IDENTIFIER ("=" ternary)? ";";
# A statement is either and expression statement or a print statement
statement   -> exprStmt
            | forStmt
            | ifStmt
            | printStmt
            | whileStmt
            | returnStmt
            | block;
# The `if` statement is a conditional or branching control flow used to not execute some piece of
# code.
forStmt     -> "for" "(" varDecl | exprStmt | ";" ) separator? ";" separator? ")" statement;
ifStmt      -> "if" "(" separator ")" statement ("else" statement)?;
exprStmt    -> separator ";" ;
printStmt   -> "print" separator ";" ;
whileStmt   -> "while" "(" separator ")" statement;
returnStmt  -> "return" separator? ";";
# A block describes a scope for variables. In code the concept of scope is represented by an
# environment
block       -> "{" declaration* "}";
# Comma has the lowest precedence, so if we match that, we match everything
separator   -> assignment ((",") assignment)*;
# Assignment has the next lowest precedence after separator. For assignment we also have setters
# used by class objects. They have tha same syntax as getters, but appear on the left side of an
# assignment
assignment  -> (call ".")? IDENTIFIER "=" assigment
            | ternary;
# Ternary conditional operator
ternary     -> logic_or | logic_or ("?") logic_or (":") logic_or;
# After the ternary operator, the logic `or` (in C `||`) has the lowest precedence
logic_or    -> logic_and ("or" logic_and)*;
# After the binary or operator, the logic `and` (in C `&&`) has the lowest precedence
logic_and   -> expression ("and" expression);
# Assignment comes next after the `comma operator`
expression  -> equality
equality    -> comparison (("!=" | "==") comparison)*;
comparison  -> term ((">" | ">=" | "<" | "<=") term)*;
term        -> factor (("-" | "+") factor)*;
# The rule recurses to match the left operand. Putting the recursive production on the left side
# and unary on the right makes the rule left-associative and unambiguous.
factor      -> factor ("/" | "*") unary
                | unary;
# Alternative to be used for the `factor` production rule to use a more optimal recursion
factor      -> unary (("/" | "*") unary)*;
# A unary expression starts with a unary operator followed by the operand. Since unary operators
# can next, `!!true` is valid
unary       -> ("!" | "-") unary | call;
# Call operator  is represented by parenthesis '()' and it is made up from a primary production
# followed by 0 or more functions calls. Each function call has the optional production of arguments
# If parenthesis are missing, this just defaults to a primary production
#
# Classes update: An expression followed by . and an identifier reads the property with that name
# from the object the expression evaluates to. As such, calling is not limited anymore just on
# expressions with parenthesis
call        -> primary ("(" arguments? ")" | "." IDENTIFIER)*;
# Arguments are similar to the separator production. Only difference here is that we do not return
# the last expression as the final result
arguments   -> assignment ("," assignment)*;
# Primary expression have the highest precedence. This means it represents all numbers, literals
# and grouping expressions
primary     -> NUMBER | STRING | "self" | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER;
# Error production for any binary operator above that does not have a left operand
error       -> ((",") | ("!=") | ("==") | (">") | (">=") | ("<") | ("<=") | ("-") | ("+") | ("/") |
                ("*") separator)*;
