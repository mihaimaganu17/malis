# More human readable CFG

expression  -> literal | unary | binary | grouping;
literal     -> NUMBER | STRING | "true" | "false" | "nil";
grouping    -> "(" expression ")";
unary       -> ( "-" | "!" ) expression;
binary      -> expression operator expression;
operator    -> "==" | "!=" | "<" | "<=" | ">" | ">=" | "+" | "-" | "*" | "/";

# Logical CFG

# A program is a sequence of declarations which ends with an EOF terminal
program     -> declaration* EOF;
# A declaration can be either a variable declaration of a statement
declaration -> varDecl
            | statement;
# Declaring a variable is done using the `var` keyword with an IDENTIFIER terminal. If we are
# binding the variable to an expression at the same time with the declaration, we use the equal
# sign between the identifier and the expression `=`.
varDecl     -> "var" IDENTIFIER ("=" ternary)? ";";
# A statement is either and expression statement or a print statement
statement   -> exprStmt
            | printStmt
            | block;
exprStmt    -> separator ";" ;
printStmt   -> "print" separator ";" ;
# A block describes a scope for variables. In code the concept of scope is represented by an
# environment
block       -> "{" declaration* "}";
# Comma has the lowest precedence, so if we match that, we match everything
separator   -> assignment ((",") assignment)*;
# Assignment has the next lowest precedence after separator
assignment  -> IDENTIFIER "=" assigment
            | ternary;
# Ternary conditional operator
ternary     -> expression | expression ("?") expression (":") expression;
# Assignment comes next after the `comma operator`
expression  -> equality
equality    -> comparison (("!=" | "==") comparison)*;
comparison  -> term ((">" | ">=" | "<" | "<=") term)*;
term        -> factor (("-" | "+") factor)*;
# The rule recurses to match the left operand. Putting the recursive production on the left side
# and unary on the right makes the rule left-associative and unambiguous.
factor      -> factor ("/" | "*") unary
                | unary;
# Alternative to be used for the `factor` production rule to use a more optimal recursion
factor      -> unary (("/" | "*") unary)*;
# A unary expression starts with a unary operator followed by the operand. Since unary operators
# can next, `!!true` is valid
unary       -> ("!" | "-") unary | primary;
# Primary expression have the highest precedence. This means it represents all numbers, literals
# and grouping expressions
primary     -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER;
# Error production for any binary operator above that does not have a left operand
error       -> ((",") | ("!=") | ("==") | (">") | (">=") | ("<") | ("<=") | ("-") | ("+") | ("/") |
                ("*") separator)*;
